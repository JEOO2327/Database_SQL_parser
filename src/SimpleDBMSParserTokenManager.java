/* Generated By:JavaCC: Do not edit this line. SimpleDBMSParserTokenManager.java */
//import
import java.io.File;
import java.io.UnsupportedEncodingException;
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.Cursor;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.LockMode;
import com.sleepycat.je.OperationStatus;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

/** Token Manager. */
public class SimpleDBMSParserTokenManager implements SimpleDBMSParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000L) != 0L)
            return 4;
         if ((active0 & 0x1fffffe0L) != 0L)
         {
            jjmatchedKind = 47;
            return 20;
         }
         if ((active0 & 0x80000000000000L) != 0L)
            return 21;
         return -1;
      case 1:
         if ((active0 & 0x1b6fffe0L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
            return 20;
         }
         if ((active0 & 0x4900000L) != 0L)
            return 20;
         return -1;
      case 2:
         if ((active0 & 0x186effa0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 2;
            }
            return 20;
         }
         if ((active0 & 0x3010040L) != 0L)
            return 20;
         return -1;
      case 3:
         if ((active0 & 0x104ef600L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
            return 20;
         }
         if ((active0 & 0x82009a0L) != 0L)
            return 20;
         return -1;
      case 4:
         if ((active0 & 0x8400L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100e7200L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
            return 20;
         }
         if ((active0 & 0x400000L) != 0L)
            return 20;
         return -1;
      case 5:
         if ((active0 & 0x8400L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xe3200L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
            return 20;
         }
         if ((active0 & 0x10004000L) != 0L)
            return 20;
         return -1;
      case 6:
         if ((active0 & 0x8400L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xe0000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 6;
            return 20;
         }
         if ((active0 & 0x3200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x8400L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 7;
            return 20;
         }
         if ((active0 & 0x60000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 8;
            return 20;
         }
         if ((active0 & 0x8400L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x60000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x8400L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000L) != 0L)
            return 20;
         if ((active0 & 0x60000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x60000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L);
      case 39:
         return jjStartNfaWithStates_0(0, 55, 21);
      case 40:
         return jjStopAtPos(0, 30);
      case 41:
         return jjStopAtPos(0, 31);
      case 42:
         return jjStopAtPos(0, 37);
      case 44:
         return jjStopAtPos(0, 32);
      case 45:
         return jjStartNfaWithStates_0(0, 39, 4);
      case 46:
         return jjStopAtPos(0, 33);
      case 59:
         return jjStopAtPos(0, 29);
      case 60:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 61:
         return jjStopAtPos(0, 36);
      case 62:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 95:
         return jjStopAtPos(0, 38);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1100000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x280L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2d00L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x240000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4001040L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0xa010000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000100L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x86800L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x408080L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1001040L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2050000L);
      case 82:
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 23, 20);
         return jjMoveStringLiteralDfa2_0(active0, 0x220600L);
      case 83:
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 20);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 20);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 68:
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 20);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400200L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20020L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x18006000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x208400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800L);
      case 84:
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 20);
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10100L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 67:
      case 99:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 20);
         break;
      case 69:
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0xc7000L);
      case 76:
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 20);
         break;
      case 77:
      case 109:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 82:
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 84:
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 20);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x8400L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 20);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x81000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2200L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x82200L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 83:
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 20);
         break;
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 20);
         return jjMoveStringLiteralDfa6_0(active0, 0x9400L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x3200L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8400L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0xc0000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x8400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 76:
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(7, 16);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0x60000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x8400L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      case 69:
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(9, 10);
         return jjMoveStringLiteralDfa10_0(active0, 0x68000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 83:
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 19, 20);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L);
      case 77:
      case 109:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(10, 13);
         break;
      case 79:
      case 111:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(10, 12);
         break;
      case 83:
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(10, 15);
         break;
      case 89:
      case 121:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(10, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(10, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(11, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 21;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 21:
                  if ((0xffffff7b00000000L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  else if (curChar == 39)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xffffff7b00000000L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 39 && kind > 40)
                     kind = 40;
                  break;
               case 3:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddStates(0, 3);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L && kind > 44)
                     kind = 44;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L && kind > 45)
                     kind = 45;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 21:
               case 1:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            return -1;
         }
         if ((active0 & 0x8000000000L) != 0L)
            return 6;
         if ((active0 & 0x40000000000000L) != 0L)
            return 23;
         if ((active0 & 0x1fffffe0L) != 0L)
         {
            jjmatchedKind = 47;
            return 22;
         }
         return -1;
      case 1:
         if ((active0 & 0x4900000L) != 0L)
            return 22;
         if ((active0 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 52;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1b6fffe0L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
            return 22;
         }
         return -1;
      case 2:
         if ((active0 & 0x3010040L) != 0L)
            return 22;
         if ((active0 & 0x186effa0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 2;
            }
            return 22;
         }
         return -1;
      case 3:
         if ((active0 & 0x82009a0L) != 0L)
            return 22;
         if ((active0 & 0x104ef600L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
            return 22;
         }
         return -1;
      case 4:
         if ((active0 & 0x400000L) != 0L)
            return 22;
         if ((active0 & 0x8400L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100e7200L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
            return 22;
         }
         return -1;
      case 5:
         if ((active0 & 0x10004000L) != 0L)
            return 22;
         if ((active0 & 0x8400L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xe3200L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
            return 22;
         }
         return -1;
      case 6:
         if ((active0 & 0x8400L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xe0000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 6;
            return 22;
         }
         if ((active0 & 0x3200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x8400L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 7;
            return 22;
         }
         if ((active0 & 0x60000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x8400L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 8;
            return 22;
         }
         if ((active0 & 0x60000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x80000L) != 0L)
            return 22;
         if ((active0 & 0x8400L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x60000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x60000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 47;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_1(0x8000000000000L);
      case 39:
         return jjStartNfaWithStates_1(0, 54, 23);
      case 40:
         return jjStopAtPos(0, 30);
      case 41:
         return jjStopAtPos(0, 31);
      case 42:
         return jjStopAtPos(0, 37);
      case 44:
         return jjStopAtPos(0, 32);
      case 45:
         return jjStartNfaWithStates_1(0, 39, 6);
      case 46:
         return jjStopAtPos(0, 33);
      case 59:
         return jjStopAtPos(0, 29);
      case 60:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_1(0x4000000000000L);
      case 61:
         return jjStopAtPos(0, 36);
      case 62:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_1(0x2000000000000L);
      case 95:
         return jjStopAtPos(0, 38);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_1(0x1100000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_1(0x280L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_1(0x2d00L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_1(0x20L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_1(0x240000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_1(0x4001040L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_1(0xa010000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_1(0x800000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_1(0x20000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_1(0x80000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_1(0xc000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_1(0x10000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_1(0x400000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000100L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x86800L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x408080L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x1001040L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x2050000L);
      case 82:
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(1, 23, 22);
         return jjMoveStringLiteralDfa2_1(active0, 0x220600L);
      case 83:
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(1, 20, 22);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(1, 26, 22);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x8000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
static private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x80L);
      case 68:
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(2, 24, 22);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x400200L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x20020L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x18006000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x208400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x1800L);
      case 84:
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(2, 6, 22);
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x10100L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
static private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_1(active0, 0x10000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x200L);
      case 67:
      case 99:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(3, 11, 22);
         break;
      case 69:
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(3, 8, 22);
         return jjMoveStringLiteralDfa4_1(active0, 0xc7000L);
      case 76:
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(3, 27, 22);
         break;
      case 77:
      case 109:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(3, 21, 22);
         return jjMoveStringLiteralDfa4_1(active0, 0x20000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_1(active0, 0x400L);
      case 82:
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(3, 7, 22);
         return jjMoveStringLiteralDfa4_1(active0, 0x400000L);
      case 84:
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(3, 5, 22);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x10000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
static private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_1(active0, 0x8400L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x20000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000L);
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(4, 22, 22);
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x40000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x81000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_1(active0, 0x2200L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
static private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_1(active0, 0x82200L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_1(active0, 0x40000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x20000L);
      case 83:
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(5, 28, 22);
         break;
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(5, 14, 22);
         return jjMoveStringLiteralDfa6_1(active0, 0x9400L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_1(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
static private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_1(active0, 0x3200L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x8400L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_1(active0, 0x10000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_1(active0, 0xc0000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0);
}
static private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_1(active0, 0x60000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_1(active0, 0x8400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0x80000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_1(active0, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_1(active0, 0x1000L);
      case 76:
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(7, 16);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_1(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0);
}
static private int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_1(active0, 0x200L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_1(active0, 0x80000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa9_1(active0, 0x60000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_1(active0, 0x8400L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_1(active0, 0x1000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_1(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0);
}
static private int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_1(active0, 0x200L);
      case 69:
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(9, 10);
         return jjMoveStringLiteralDfa10_1(active0, 0x68000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_1(active0, 0x2000L);
      case 83:
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(9, 19, 22);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_1(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0);
}
static private int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_1(active0, 0x200L);
      case 77:
      case 109:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(10, 13);
         break;
      case 79:
      case 111:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(10, 12);
         break;
      case 83:
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(10, 15);
         break;
      case 89:
      case 121:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(10, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(10, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_1(9, active0);
}
static private int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(11, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_1(10, active0);
}
static private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 23;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0xffffff7b00000000L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  else if (curChar == 39)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  break;
               case 0:
                  if ((0xffffff7b00000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(1, 2);
                  if ((0xfc00ff7a00000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAddStates(4, 7);
                  }
                  if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(6);
                  }
                  break;
               case 1:
                  if ((0xffffff7b00000000L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 39 && kind > 40)
                     kind = 40;
                  break;
               case 3:
                  if ((0xffffff7b00000000L & l) != 0L && kind > 52)
                     kind = 52;
                  break;
               case 4:
                  if ((0xfc00ff7a00000000L & l) != 0L && kind > 53)
                     kind = 53;
                  break;
               case 5:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddStates(4, 7);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L && kind > 44)
                     kind = 44;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L && kind > 45)
                     kind = 45;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
               case 1:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 0:
                  if ((0x7fffffffffffffffL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(22);
                  }
                  else if ((0x78000001f8000001L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  break;
               case 3:
                  if ((0x7fffffffffffffffL & l) != 0L && kind > 52)
                     kind = 52;
                  break;
               case 4:
                  if ((0x78000001f8000001L & l) != 0L && kind > 53)
                     kind = 53;
                  break;
               case 21:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 23 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   4, 6, 9, 10, 6, 8, 11, 12, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\73", "\50", "\51", "\54", "\56", "\76", "\74", "\75", "\52", "\137", 
"\55", null, null, null, null, null, null, null, null, null, "\76\75", "\74\75", 
"\41\75", null, null, "\47", "\47", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "STATE1",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 0, 1, 
};
static final long[] jjtoToken = {
   0xffffffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[23];
static private final int[] jjstateSet = new int[46];
static protected char curChar;
/** Constructor. */
public SimpleDBMSParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public SimpleDBMSParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 23; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
