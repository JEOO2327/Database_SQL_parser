options{  static = true;  DEBUG_PARSER = false;  IGNORE_CASE = true;}PARSER_BEGIN(SimpleDBMSParser)//importimport java.io.File;import java.io.UnsupportedEncodingException;import com.sleepycat.je.Database;import com.sleepycat.je.DatabaseEntry;import com.sleepycat.je.DatabaseException;import com.sleepycat.je.DatabaseConfig;import com.sleepycat.je.Cursor;import com.sleepycat.je.Environment;import com.sleepycat.je.EnvironmentConfig;import com.sleepycat.je.LockMode;import com.sleepycat.je.OperationStatus;import java.util.ArrayList;import java.util.Map;import java.util.HashMap;public class SimpleDBMSParser{  public static final int PRINT_SYNTAX_ERROR = 0;  public static final int SUCCESS_CREATE_TABLE = 1;  public static final int SUCCESS_DROP_TABLE = 2;  public static final int SUCCESS_DESC = 3;  public static final int PRINT_INSERT = 4;  public static final int PRINT_DELETE = 5;  public static final int PRINT_SELECT = 6;  public static final int SUCCESS_SHOW_TABLES = 7;//FAIL	public static final int TABLE_EXISTENCE_ERROR = -11;	public static final int DUPLICATE_COLUMN_DEF_ERROR = -12;	public static final int DUPLICATE_PRIMARY_KEY_ERROR = -13;	public static final int CHAR_LENGTH_ERROR = -14;		public static final int REFERENCE_TYPE_ERROR = -15;	public static final int REFERENCE_NON_PRIMARY_KEY_ERROR = -16;	public static final int REFERENCE_COLUMN_EXISTENCE_ERROR = -17;	public static final int REFERENCE_TABLE_EXISTENCE_ERROR = -18;	public static final int NON_EXISTING_COLUMN_DEF_ERROR = -19;		public static final int DUPLICATE_FOREIGN_KEY_ERROR = -100; // ONE COLUMN USED DUPLICATE FOREIGN KEY DEF		public static final int DROP_REFERENCED_TABLE_ERROR = -21;	public static final int NO_SUCH_TABLE = -22;//INSERT	public static final int INSERT_TYPE_MISMATCH_ERROR = -41;	public static final int	INSERT_COLUMN_NON_NULLABLE_ERROR = -42;	public static final int	INSERT_COLUMN_EXISTENCE_ERROR = -43;	public static final int	INSERT_DUPLICATE_PRIMARYKEY_ERROR = -44;	public static final int	INSERT_REFERENTIAL_INTEGRITY_ERROR = -45;		public static final int SHOW_TABLES_NO_TABLE = -71;	// Open Database Environment or if not, create one.	public static EnvironmentConfig envConfig = null;	public static Environment myDbEnvironment = null;	public static Database myDatabase = null;	public static createtable createmethod = new createtable(); 	public static tablequery tableinfo = new tablequery();	public static droptable dropmethod = new droptable();	public static printmessage print_message = new printmessage();	public static insert insert_method = new insert();	public static delete delete_method = new delete();	public static select select_method = new select();  public static void main(String args[]) throws ParseException  {    EnvironmentConfig envConfig = new EnvironmentConfig();	envConfig.setAllowCreate(true);	myDbEnvironment = new Environment(new File("db/"), envConfig);		// Open Database or if not, create one.	DatabaseConfig dbConfig = new DatabaseConfig();	dbConfig.setAllowCreate(true);	dbConfig.setSortedDuplicates(true);	myDatabase = myDbEnvironment.openDatabase(null, "sampleDatabase", dbConfig);	    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);    System.out.print("DB_2016-10586> ");		    while (true)    {      try      {        parser.command();      }      catch (Exception e)      {        print_message.printMessage(PRINT_SYNTAX_ERROR, null);        SimpleDBMSParser.ReInit(System.in);      }    }    }}PARSER_END(SimpleDBMSParser)< DEFAULT, STATE1 > SKIP : {"\r" | "\t" | "\n" }< DEFAULT > SKIP : { " " }< DEFAULT, STATE1 > TOKEN : /* Keywords */{  < EXIT : "exit" >| < INT : "int" >| < CHAR : "char" >| < DATE : "date" >//QUERY START| < CREATE_TABLE : "create table" >| < DROP_TABLE : "drop table" >| < DESC : "desc" >| < INSERT_INTO : "insert into" >| < DELETE_FROM : "delete from" >| < SELECT : "select" >| < SHOW_TABLES : "show tables" >//QUERY END| < NOT_NULL : "not null" >| < PRIMARY_KEY : "primary key" >| < FOREIGN_KEY : "foreign key" >| < REFERENCES : "references" >| < AS : "as" >| < FROM : "from" >| < WHERE : "where" >| < OR : "or" >| < AND : "and" >| < NOT : "not" >| < IS : "is" >| < NULL : "null" >| < VALUES : "values" >}< DEFAULT, STATE1 > TOKEN :{  < SEMICOLON : ";" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < COMMA : "," >| < PERIOD : "." >| < GREATER : ">" >| < LESS : "<" >| < EQUAL : "=" >| < STAR : "*" >| < UNDERSCORE : "_" >| < UPPERSCORE : "-" >| < CHAR_STRING : < QUOTE_DEFAULT > (< NON_QUOTE_CHARACTER >)* < QUOTE_STATE1 > >| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>| < SIGN : "+" | "-" >| < DIGIT : [ "0"-"9" ] >| < NNNN : < DIGIT >< DIGIT >< DIGIT >< DIGIT > >| < NN : < DIGIT >< DIGIT > >| < DATE_VALUE : < NNNN > < UPPERSCORE > < NN > < UPPERSCORE > < NN > >  | < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >| < ALPHABET : [ "a"-"z", "A"-"Z" ] >//| < SPACE : " " >| < GRE : ">=" >| < LE : "<=" >| < NE : "!=" >}< STATE1 > TOKEN : {< NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARACTERS > | " " >| < NON_QUOTE_SPECIAL_CHARACTERS : "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "(" | ")"									| "-" | "_" | "+" | "~" | "`" | ":" | ";" | "," | "[" |									 "]" | "{" | "}" | "\\" | "/" | "?" | "|" | "<" | ">" | "=" | "." >| < QUOTE_STATE1 : "'" > : DEFAULT	}< DEFAULT > TOKEN : {  < QUOTE_DEFAULT : "'" > : STATE1}void command() :{}{  queryList()| (    < EXIT >    < SEMICOLON >    {      if(myDatabase != null) {          myDatabase.close();      }            if(myDbEnvironment != null) {         myDbEnvironment.close();       }             System.exit(0);    }  ) }void queryList() :{  int q;}{  (    query()  )+}void query() :{	int q;	String tname;	String[] q_tname = new String[2];	String str;	String[] q_str = new String[2];		ArrayList<String> col_list = new ArrayList<String>();	ArrayList<String > val_list = new ArrayList<String >();	ArrayList<String > val_type = new ArrayList<String >();	ArrayList<String > tname_list = new ArrayList<String >();	ArrayList<String > tnewname_list = new ArrayList<String >();	ArrayList<String > table_period_list = new ArrayList<String >();	ArrayList<String > colname_list = new ArrayList<String >();	ArrayList<String > cnewname_list = new ArrayList<String >();		ArrayList<String> predicate_list = new ArrayList<String>();  	ArrayList<String> predicate_info_list = new ArrayList<String>();}{(  	tname = createTableQuery(col_list)  	< SEMICOLON >  	{		q = PRINT_SYNTAX_ERROR;		q_tname = createmethod.CreatingTable(tname, col_list , myDatabase);  	  		tname = q_tname[1];		q = Integer.parseInt(q_tname[0]);      	print_message.printMessage(q, tname);  	} |   tname = dropTableQuery()	< SEMICOLON >	{		q = dropmethod.Drop(tname , myDatabase);    	print_message.printMessage(q, tname);	}|   tname = descQuery()	< SEMICOLON >    {    	q = tableinfo.printDesc(tname , myDatabase);    	print_message.printMessage(q, tname);    }    |   tname = insertQuery(col_list, val_list, val_type)	< SEMICOLON >    {		q_str = insert_method.insertRecord(tname, col_list, val_list, val_type , myDatabase);		q = Integer.parseInt(q_str[0]);		str = q_str[1];          	print_message.printMessage(q, str);     }|   tname = deleteQuery(predicate_list, predicate_info_list)	< SEMICOLON >    {    	q_str = delete_method.deleteRecord(tname, predicate_list, predicate_info_list, myDatabase);		q = Integer.parseInt(q_str[0]);		str = q_str[1];    	print_message.printMessage(q, str);    }|   selectQuery(tname_list, tnewname_list, table_period_list, colname_list, cnewname_list, predicate_list, predicate_info_list)	< SEMICOLON >    {		q_str = select_method.selectRecord(tname_list, tnewname_list, table_period_list, colname_list, cnewname_list, predicate_list, predicate_info_list, myDatabase);      	q = Integer.parseInt(q_str[0]);		str = q_str[1];		    	print_message.printMessage(q, str);    }|   showTablesQuery()	< SEMICOLON >    {    	tname = null;    	q = tableinfo.printShowTable(myDatabase);          	print_message.printMessage(q, tname);    })    }// QUERY STARTString createTableQuery(ArrayList<String> col_list) :	//create table{    int q;	String tname;	String[] result = new String[2];}{	  < CREATE_TABLE >  tname = tableName()  tableElementList(col_list)  {	return tname;  }}String dropTableQuery() :		//drop table{	String tname;}{  < DROP_TABLE >  tname = tableName()  {    return tname;  }}String descQuery() :			//desc{	String tname;}{	< DESC >	tname = tableName()	{	  return tname;	}}String insertQuery(ArrayList<String> col_list, ArrayList<String> val_list, ArrayList<String> val_type) :		//insert{	String tname;}{  < INSERT_INTO >  tname = tableName()  insertColumnsAndSource(col_list, val_list, val_type)  {	return tname;      }}String deleteQuery(ArrayList<String> predicate_list, ArrayList<String> predicate_info_list) :		//delete{	String tname;}{  < DELETE_FROM >  tname = tableName()  ( whereClause(predicate_list, predicate_info_list) )?  {    return tname;  }  }void selectQuery(ArrayList<String > tname_list, ArrayList<String > tnewname_list, ArrayList<String > table_period_list, ArrayList<String> colname_list, ArrayList<String> cnewname_list, ArrayList<String> predicate_list, ArrayList<String> predicate_info_list) :		//select{}{  < SELECT >  selectList(table_period_list, colname_list, cnewname_list)  tableExpression(tname_list, tnewname_list, predicate_list, predicate_info_list)}void showTablesQuery() :	//showTables{}{  < SHOW_TABLES >}// QUERY END// CREATE STARTvoid tableElementList(ArrayList<String> col_list) :{}{  // ( TableElement (, TableElement)* )  < LEFT_PAREN >   tableElement(col_list)  (    < COMMA > { col_list.add("/"); }    tableElement(col_list)  )*  < RIGHT_PAREN >}void tableElement(ArrayList<String> col_list) :{}{  columnDefinition(col_list)	// <LEGAL_IDENTIFIER> DataType ("NOT NULL")?| tableConstraintDefinition(col_list)	// <PRIMARY_KEY> columNameList or <FOREIGN_KEY > columnNameList <REFERENCES> ...}void columnDefinition(ArrayList<String> col_list) :{  	String cname;}{  cname = columnName() { col_list.add(cname); }  dataType(col_list)  (    < NOT_NULL >    {      col_list.remove(col_list.size() - 1);      col_list.add("notNull");    }  )?}void tableConstraintDefinition(ArrayList<String> col_list) :{}{  primaryKeyConstraint(col_list)| referentialConstraint(col_list)}void primaryKeyConstraint(ArrayList<String> col_list) :{  Token P;}{  P = < PRIMARY_KEY > { col_list.add("primaryKey"); }  columnNameList(col_list)}void referentialConstraint(ArrayList<String> col_list) :{	Token F;	Token R;	String tname;}{  F = < FOREIGN_KEY > { col_list.add("foreignKey"); }  columnNameList(col_list)  R = < REFERENCES > { col_list.add("references"); }  tname = tableName() { col_list.add(tname); }  columnNameList(col_list)}void columnNameList(ArrayList<String> col_list) :{	String cname;}{ //( <LEGAL_IDENTIFIER > (,<LEGAL_IDENTIFIER>)* )  < LEFT_PAREN >  cname = columnName(){ col_list.add(cname); }  (    < COMMA >     cname = columnName() { col_list.add(cname); }  )*  < RIGHT_PAREN >}void dataType(ArrayList<String> col_list) :{  Token T1;  Token T2; }{  T1 = < INT > { col_list.add("int"); col_list.add("nullable"); }| ( // "char" (INT_VALUE)    T1 = < CHAR > { col_list.add("char"); }    < LEFT_PAREN >    T2 = < INT_VALUE > { col_list.add(T2.image); col_list.add("nullable"); }    < RIGHT_PAREN >  ) | T1 = < DATE > { col_list.add("date"); col_list.add("nullable"); }}String tableName() :{  	Token t;}{	t =  < LEGAL_IDENTIFIER >	{		return (t.image).toLowerCase();	}}String columnName() :{	Token t;}{  t = < LEGAL_IDENTIFIER >  {    return (t.image).toLowerCase();  }}// CREATE END// SELECT STARTvoid selectList( ArrayList<String > table_period_list, ArrayList<String> colname_list, ArrayList<String> cnewname_list) :{}{ // * or selectedColumn (, selectedColunm)*  	< STAR >  	{  	  table_period_list.add("null");  	  colname_list.add("*");  	  cnewname_list.add("*");  	} | 	selectedColumn(table_period_list, colname_list, cnewname_list)	(	  < COMMA >	  selectedColumn(table_period_list, colname_list, cnewname_list)	)*}void selectedColumn( ArrayList<String > table_period_list, ArrayList<String> colname_list, ArrayList<String> cnewname_list) :{  String c;  String nc;  String t = "null";}{  // (<LEGAL_INDENTIFIER>.)? <LEGAL_INDENTIFIER> (AS <LEGAL_INDENTIFIER>)? 	(	  LOOKAHEAD(4)	  t = tableName()	  < PERIOD >	)?	c = columnName()	{	    table_period_list.add(t);	    nc = c;	    colname_list.add(c);	}	(	  < AS >	  nc = columnName()	)?	{	  cnewname_list.add(nc);	}}void tableExpression(ArrayList<String > tname_list, ArrayList<String > tnewname_list, ArrayList<String> predicate_list, ArrayList<String> predicate_info_list) :{}{  fromClause(tname_list, tnewname_list)  (    whereClause(predicate_list, predicate_info_list)  )?}void fromClause(ArrayList<String > tname_list, ArrayList<String > tnewname_list) :{}{	< FROM >	tableReferenceList(tname_list, tnewname_list)}void tableReferenceList(ArrayList<String > tname_list, ArrayList<String > tnewname_list) :{}{  referedTable(tname_list, tnewname_list)  (    < COMMA >    referedTable(tname_list, tnewname_list)  )*}void referedTable(ArrayList<String > tname_list, ArrayList<String > tnewname_list) :{	String t;	String nt;}{  t = tableName()  {	tname_list.add(t);	nt = t;  }  (    < AS >    nt = tableName()  )?  {	tnewname_list.add(nt);  }}void whereClause(ArrayList<String> predicate_list, ArrayList<String> predicate_info_list) :{}{	< WHERE >	booleanValueExpression(predicate_list, predicate_info_list)  }void booleanValueExpression(ArrayList<String> predicate_list, ArrayList<String> predicate_info_list) :{}{	{		predicate_list.add("(");		predicate_info_list.add("LP");	}	booleanTerm(predicate_list, predicate_info_list)	{		predicate_list.add(")");		predicate_info_list.add("RP");	}	(	  < OR >	  {	    predicate_list.add("OR");	    predicate_info_list.add("LOP");	    predicate_list.add("(");	    predicate_info_list.add("LP");	  }	  booleanTerm(predicate_list, predicate_info_list)	  { 	    predicate_list.add(")");	    predicate_info_list.add("RP");	  }	  	)*}void booleanTerm(ArrayList<String> predicate_list, ArrayList<String> predicate_info_list) :{}{  booleanFactor(predicate_list, predicate_info_list)  (    < AND >    {      predicate_list.add("AND");      predicate_info_list.add("LOP");    }    booleanFactor(predicate_list, predicate_info_list)  )*}void booleanFactor(ArrayList<String> predicate_list, ArrayList<String> predicate_info_list) :{}{	( < NOT >	{	  predicate_list.add("NOT");	  predicate_info_list.add("NOT");	}	 )?	booleanTest(predicate_list, predicate_info_list)}void booleanTest(ArrayList<String> predicate_list, ArrayList<String> predicate_info_list) :{}{  predicate(predicate_list, predicate_info_list)| parenthesizedBooleanExpression(predicate_list, predicate_info_list)}void parenthesizedBooleanExpression(ArrayList<String> predicate_list, ArrayList<String> predicate_info_list) :{}{  < LEFT_PAREN >  {    predicate_list.add("(");    predicate_info_list.add("LP");  }  booleanValueExpression(predicate_list, predicate_info_list)  < RIGHT_PAREN >  {    predicate_list.add(")");    predicate_info_list.add("RP");  }}void nullPredicate(ArrayList<String> predicate_list, ArrayList<String> predicate_info_list) :{	String t;	String c;	String n;}{	{		predicate_list.add("(");		predicate_info_list.add("LP");	  	}  // (<LEGAL_INDENTIFIER>.)? <LEGAL_INDENTIFIER> nullOperation	(	  LOOKAHEAD(4)	  t = tableName()	  < PERIOD >	  {	    predicate_list.add(t);	    predicate_info_list.add("tname_period");	  }	)?	c = columnName()	{		predicate_list.add(c);		predicate_info_list.add("column_name");	}	n = nullOperation()	{		predicate_list.add(n);		predicate_info_list.add("NOP");		predicate_list.add(")");		predicate_info_list.add("RP");			}}void predicate(ArrayList<String> predicate_list, ArrayList<String> predicate_info_list) :{}{  LOOKAHEAD(4)  comparisonPredicate(predicate_list, predicate_info_list)| nullPredicate(predicate_list, predicate_info_list)}void comparisonPredicate(ArrayList<String> predicate_list, ArrayList<String> predicate_info_list) :{  String s;}{  {	predicate_list.add("(");	predicate_info_list.add("LP");  }  compOperand(predicate_list, predicate_info_list)  s = compOp()  {	predicate_list.add(s);	predicate_info_list.add("COMPOP");  }  compOperand(predicate_list, predicate_info_list)  {	predicate_list.add(")");	predicate_info_list.add("RP");  }}void compOperand(ArrayList<String> predicate_list, ArrayList<String> predicate_info_list) :{  String t;  String c;}{  comparableValue(predicate_list, predicate_info_list)  | ( 	LOOKAHEAD(4)	t = tableName()	< PERIOD >	{	    predicate_list.add(t);		predicate_info_list.add("tname_period");	}   )?	c = columnName()	{	    predicate_list.add(c);  		predicate_info_list.add("column_name");	}}String compOp() :{}{  < GREATER >	// ">"  {    return ">";  }|	  < LESS >		// "<"  {    return "<";  }|		  < EQUAL >		// "="  {    return "=";  }  |	  < GRE >	// ">="  {    return ">=";  }  |		  < LE >	// "<="  {    return "<=";  }  |		  < NE >	// "!="  {    return "!=";  }		}void comparableValue(ArrayList<String> val_list, ArrayList<String> val_type) :{  Token t;  String value;}{	t = < INT_VALUE >	{		value = t.image;		val_list.add(value);		val_type.add("int");	}	|	t = < CHAR_STRING >{		value = (t.image).toLowerCase();		val_list.add(value);		val_type.add("char");	}	|		//CHAR STRING	t = < DATE_VALUE >	{		value = t.image;		val_list.add(value);		val_type.add("date");	}		//DATE VALUE <NNNN>-<NN>-<NN>}String nullOperation() :{  Token N;  String result;}{  // IS NULL or IS NOT NULL  < IS >(    < NULL >    {      result = "is null";      return result;    }| < NOT_NULL >	{		result = "is not null";		return result;	})}// SELECT END// INSERT/DELETE STARTvoid insertColumnsAndSource(ArrayList<String> col_list, ArrayList<String> val_list, ArrayList<String> val_type) :{}{  ( columnNameList(col_list) )?  valueList(val_list, val_type)    }void valueList(ArrayList<String> val_list, ArrayList<String> val_type) :{}{  //"values"( value(,value)* )  < VALUES >  < LEFT_PAREN >  value(val_list, val_type)  (    < COMMA >    value(val_list, val_type)  )*  < RIGHT_PAREN >}void value(ArrayList<String> val_list, ArrayList<String> val_type) :{}{	< NULL >	{	  val_list.add("'null");	  val_type.add("null");	}|	comparableValue(val_list, val_type)}