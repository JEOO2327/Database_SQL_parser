options{  static = true;  DEBUG_PARSER = false;  IGNORE_CASE = true;}PARSER_BEGIN(SimpleDBMSParser)//importimport java.io.File;import java.io.UnsupportedEncodingException;import com.sleepycat.je.Database;import com.sleepycat.je.DatabaseEntry;import com.sleepycat.je.DatabaseException;import com.sleepycat.je.DatabaseConfig;import com.sleepycat.je.Cursor;import com.sleepycat.je.Environment;import com.sleepycat.je.EnvironmentConfig;import com.sleepycat.je.LockMode;import com.sleepycat.je.OperationStatus;import java.util.ArrayList;import java.util.Map;import java.util.HashMap;public class SimpleDBMSParser{  public static final int PRINT_SYNTAX_ERROR = 0;  public static final int SUCCESS_CREATE_TABLE = 1;  public static final int SUCCESS_DROP_TABLE = 2;  public static final int SUCCESS_DESC = 3;  public static final int PRINT_INSERT = 4;  public static final int PRINT_DELETE = 5;  public static final int PRINT_SELECT = 6;  public static final int SUCCESS_SHOW_TABLES = 7;//FAIL	public static final int TABLE_EXISTENCE_ERROR = -11;	public static final int DUPLICATE_COLUMN_DEF_ERROR = -12;	public static final int DUPLICATE_PRIMARY_KEY_ERROR = -13;	public static final int CHAR_LENGTH_ERROR = -14;		public static final int REFERENCE_TYPE_ERROR = -15;	public static final int REFERENCE_NON_PRIMARY_KEY_ERROR = -16;	public static final int REFERENCE_COLUMN_EXISTENCE_ERROR = -17;	public static final int REFERENCE_TABLE_EXISTENCE_ERROR = -18;	public static final int NON_EXISTING_COLUMN_DEF_ERROR = -19;		public static final int DUPLICATE_FOREIGN_KEY_ERROR = -100; // ONE COLUMN USED DUPLICATE FOREIGN KEY DEF		public static final int DROP_REFERENCED_TABLE_ERROR = -21;	public static final int NO_SUCH_TABLE = -22;		public static final int SHOW_TABLES_NO_TABLE = -71;	// Open Database Environment or if not, create one.	public static EnvironmentConfig envConfig = null;	public static Environment myDbEnvironment = null;	public static Database myDatabase = null;	public static createtable createmethod = new createtable(); 	public static tablequery tableinfo = new tablequery();	public static droptable dropmethod = new droptable();	public static printmessage print_message = new printmessage();  public static void main(String args[]) throws ParseException  {    EnvironmentConfig envConfig = new EnvironmentConfig();	envConfig.setAllowCreate(true);	myDbEnvironment = new Environment(new File("db/"), envConfig);		// Open Database or if not, create one.	DatabaseConfig dbConfig = new DatabaseConfig();	dbConfig.setAllowCreate(true);	dbConfig.setSortedDuplicates(true);	myDatabase = myDbEnvironment.openDatabase(null, "sampleDatabase", dbConfig);	    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);    System.out.print("DB_2016-10586> ");	    while (true)    {      try      {        parser.command();      }      catch (Exception e)      {        print_message.printMessage(PRINT_SYNTAX_ERROR, null);        SimpleDBMSParser.ReInit(System.in);      }    }    }}PARSER_END(SimpleDBMSParser)< DEFAULT, STATE1 > SKIP : {"\r" | "\t" | "\n" }< DEFAULT > SKIP : { " " }< DEFAULT, STATE1 > TOKEN : /* Keywords */{  < EXIT : "exit" >| < INT : "int" >| < CHAR : "char" >| < DATE : "date" >//QUERY START| < CREATE_TABLE : "create table" >| < DROP_TABLE : "drop table" >| < DESC : "desc" >| < INSERT_INTO : "insert into" >| < DELETE_FROM : "delete from" >| < SELECT : "select" >| < SHOW_TABLES : "show tables" >//QUERY END| < NOT_NULL : "not null" >| < PRIMARY_KEY : "primary key" >| < FOREIGN_KEY : "foreign key" >| < REFERENCES : "references" >| < AS : "as" >| < FROM : "from" >| < WHERE : "where" >| < OR : "or" >| < AND : "and" >| < NOT : "not" >| < IS : "is" >| < NULL : "null" >| < VALUES : "values" >}< DEFAULT, STATE1 > TOKEN :{  < SEMICOLON : ";" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < COMMA : "," >| < PERIOD : "." >| < GREATER : ">" >| < LESS : "<" >| < EQUAL : "=" >| < STAR : "*" >| < UNDERSCORE : "_" >| < UPPERSCORE : "-" >| < CHAR_STRING : < QUOTE_DEFAULT > (< NON_QUOTE_CHARACTER >)* < QUOTE_STATE1 > >| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>| < SIGN : "+" | "-" >| < DIGIT : [ "0"-"9" ] >| < NNNN : < DIGIT >< DIGIT >< DIGIT >< DIGIT > >| < NN : < DIGIT >< DIGIT > >| < DATE_VALUE : < NNNN > < UPPERSCORE > < NN > < UPPERSCORE > < NN > >  | < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >| < ALPHABET : [ "a"-"z", "A"-"Z" ] >//| < SPACE : " " >| < GRE : ">=" >| < LE : "<=" >| < NE : "!=" >}< STATE1 > TOKEN : {< NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARACTERS > | " " >| < NON_QUOTE_SPECIAL_CHARACTERS : "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "(" | ")"									| "-" | "_" | "+" | "~" | "`" | ":" | ";" | "," | "[" |									 "]" | "{" | "}" | "\\" | "/" | "?" | "|" | "<" | ">" | "=" | "." >| < QUOTE_STATE1 : "'" > : DEFAULT	}< DEFAULT > TOKEN : {  < QUOTE_DEFAULT : "'" > : STATE1}void command() :{}{  queryList()| (    < EXIT >    < SEMICOLON >    {      if(myDatabase != null) {          myDatabase.close();      }            if(myDbEnvironment != null) {         myDbEnvironment.close();       }             System.exit(0);    }  ) }void queryList() :{  int q;}{  (    query()  )+}void query() :{  int q;  String tname;  String[] q_tname = new String[2]; ArrayList<String> slist = new ArrayList<String>();  }{(  	tname = createTableQuery(slist)  	< SEMICOLON >  	{		q = PRINT_SYNTAX_ERROR;		q_tname = createmethod.CreatingTable(tname, slist , myDatabase);  	  		tname = q_tname[1];		q = Integer.parseInt(q_tname[0]);      	print_message.printMessage(q, tname);  	} |   tname = dropTableQuery()	< SEMICOLON >	{	  q = dropmethod.Drop(tname , myDatabase);      print_message.printMessage(q, tname);	}|   tname = descQuery()	< SEMICOLON >    {      q = tableinfo.printDesc(tname , myDatabase);      print_message.printMessage(q, tname);    }|   insertQuery()	< SEMICOLON >    {      tname = null;      q = PRINT_INSERT;      print_message.printMessage(q, tname);     }|   deleteQuery()	< SEMICOLON >    {      tname = null;      q = PRINT_DELETE;      print_message.printMessage(q, tname);    }|   selectQuery()	< SEMICOLON >    {	  tname = null;      q = PRINT_SELECT;      print_message.printMessage(q, tname);    }|   showTablesQuery()	< SEMICOLON >    {      tname = null;      q = tableinfo.printShowTable(myDatabase);            print_message.printMessage(q, tname);    })    }// QUERY STARTString createTableQuery(ArrayList<String> slist) :	//create table{    int q;	String tname;	String[] result = new String[2];}{	  < CREATE_TABLE >  tname = tableName()  tableElementList(slist)  {	return tname;  }}String dropTableQuery() :		//drop table{	String tname;}{  < DROP_TABLE >  tname = tableName()  {    return tname;  }}String descQuery() :			//desc{	String tname;}{	< DESC >	tname = tableName()	{	  return tname;	}}void insertQuery() :		//insert{}{  < INSERT_INTO >  tableName()  insertColumnsAndSource()}void deleteQuery() :		//delete{}{  < DELETE_FROM >  tableName()  ( whereClause() )?  }void selectQuery() :		//select{}{  < SELECT >  selectList()  tableExpression()}void showTablesQuery() :	//showTables{}{  < SHOW_TABLES >}// QUERY END// CREATE STARTvoid tableElementList(ArrayList<String> slist) :{}{  // ( TableElement (, TableElement)* )  < LEFT_PAREN >   tableElement(slist)  (    < COMMA > { slist.add("/"); }    tableElement(slist)  )*  < RIGHT_PAREN >}void tableElement(ArrayList<String> slist) :{}{  columnDefinition(slist)	// <LEGAL_IDENTIFIER> DataType ("NOT NULL")?| tableConstraintDefinition(slist)	// <PRIMARY_KEY> columNameList or <FOREIGN_KEY > columnNameList <REFERENCES> ...}void columnDefinition(ArrayList<String> slist) :{  	String cname;}{  cname = columnName() { slist.add(cname); }  dataType(slist)  (    < NOT_NULL >    {      slist.remove(slist.size() - 1);      slist.add("notNull");    }  )?}void tableConstraintDefinition(ArrayList<String> slist) :{}{  primaryKeyConstraint(slist)| referentialConstraint(slist)}void primaryKeyConstraint(ArrayList<String> slist) :{  Token P;}{  P = < PRIMARY_KEY > { slist.add("primaryKey"); }  columnNameList(slist)}void referentialConstraint(ArrayList<String> slist) :{	Token F;	Token R;	String tname;}{  F = < FOREIGN_KEY > { slist.add("foreignKey"); }  columnNameList(slist)  R = < REFERENCES > { slist.add("references"); }  tname = tableName() { slist.add(tname); }  columnNameList(slist)}void columnNameList(ArrayList<String> slist) :{	String cname;}{ //( <LEGAL_IDENTIFIER > (,<LEGAL_IDENTIFIER>)* )  < LEFT_PAREN >  cname = columnName(){ slist.add(cname); }  (    < COMMA >     cname = columnName() { slist.add(cname); }  )*  < RIGHT_PAREN >}void dataType(ArrayList<String> slist) :{  Token T1;  Token T2; }{  T1 = < INT > { slist.add("int"); slist.add("nullable"); }| ( // "char" (INT_VALUE)    T1 = < CHAR > { slist.add("char"); }    < LEFT_PAREN >    T2 = < INT_VALUE > { slist.add(T2.image); slist.add("nullable"); }    < RIGHT_PAREN >  ) | T1 = < DATE > { slist.add("date"); slist.add("nullable"); }}String tableName() :{  	Token t;}{	t =  < LEGAL_IDENTIFIER >	{		return (t.image).toLowerCase();	}}String columnName() :{	Token t;}{  t = < LEGAL_IDENTIFIER >  {    return (t.image).toLowerCase();  }}// CREATE END// SELECT STARTvoid selectList() :{}{ // * or selectedColumn (, selectedColunm)*  	< STAR > | 	selectedColumn()	(	  < COMMA >	  selectedColumn()	)*}void selectedColumn() :{}{  // (<LEGAL_INDENTIFIER>.)? <LEGAL_INDENTIFIER> (AS <LEGAL_INDENTIFIER>)? 	(	  LOOKAHEAD(4)	  tableName()	  < PERIOD >	)?	columnName()	(	  < AS >	  columnName()	)?}void tableExpression() :{}{  fromClause()  (    whereClause()  )?}void fromClause() :{}{	< FROM >	tableReferenceList()}void tableReferenceList() :{}{  referedTable()  (    < COMMA >    referedTable()  )*}void referedTable() :{}{  tableName()  (    < AS >    tableName()  )?}void whereClause() :{}{	< WHERE >	booleanValueExpression()  }void booleanValueExpression() :{}{	booleanTerm()	(	  < OR >	  booleanTerm()	)*}void booleanTerm() :{}{  booleanFactor()  (    < AND >    booleanFactor()  )*}void booleanFactor() :{}{	( < NOT > )?	booleanTest()}void booleanTest() :{}{  predicate()| parenthesizedBooleanExpression()}void parenthesizedBooleanExpression() :{}{  < LEFT_PAREN >  booleanValueExpression()  < RIGHT_PAREN >}void nullPredicate() :{}{  // (<LEGAL_INDENTIFIER>.)? <LEGAL_INDENTIFIER> nullOperation	(	  LOOKAHEAD(4)	  tableName()	  < PERIOD >	)?	columnName()	nullOperation()}void predicate() :{}{  LOOKAHEAD(4)  comparisonPredicate()| nullPredicate()}void comparisonPredicate() :{}{  compOperand()  compOp()  compOperand()}void compOperand() :{}{  comparableValue()| ( 	LOOKAHEAD(4)	tableName()	< PERIOD >   )?	columnName()}void compOp() :{}{  < GREATER >|	// ">"  < LESS >|		// "<"  < EQUAL >|	// "="  < GRE >|		// ">="  < LE >|		// "<="  < NE >		// "!="}void comparableValue() :{}{  < INT_VALUE >|  < CHAR_STRING >|		//CHAR STRING  < DATE_VALUE >		//DATE VALUE <NNNN>-<NN>-<NN>}void nullOperation() :{}{  // IS NULL or IS NOT NULL  < IS >(    < NULL >| < NOT_NULL >)}// SELECT END// INSERT/DELETE STARTvoid insertColumnsAndSource() :{  ArrayList<String> slist = new ArrayList<String>();}{  ( columnNameList(slist) )?  valueList()    }void valueList() :{}{  //"values"( value(,value)* )  < VALUES >  < LEFT_PAREN >  value()  (    < COMMA >    value()  )*  < RIGHT_PAREN >}void value() :{}{  < NULL >| comparableValue()}